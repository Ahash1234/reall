Create a fully functional website using react, and optionally a backend like Node.js with Express or PHP for handling data persistence (use a simple JSON file or local storage for demo purposes if no database). The website should be a listing platform similar to a basic real estate or product marketplace, with the following features:

Home Page/User View:

Display a searchable list of listings in a grid or list format.
Each listing card should show a thumbnail photo, title, brief description, and basic info like price and location.
Include a search bar at the top that allows users to filter listings by keywords (e.g., title, location, or description). The search should be dynamic and update the list in real-time using JavaScript.
When a user clicks or taps on a listing (make it responsive for mobile), open a detailed view modal or navigate to a dedicated details page.
In the details view, show full details including: multiple photos (carousel if possible), price, location (with a map embed if easy, like Google Maps), full description, additional attributes (e.g., size, features), and a "Contact" button that opens a form or email link to inquire about the listing.


Admin Dashboard:

Accessible via a login page where the main host enters a username and password (hardcode default credentials like username: 'admin', password: 'password' for simplicity, or use local storage for session management).
After login, show a dashboard with options to:

View all current listings in a table or cards.
Edit existing listings: allow updating title, description, price, location, photos (support uploading new images), and other details.
Add new listings: provide a form with fields for title, description, price, location, multiple photo uploads (store images in a folder or as base64), and additional attributes.
Delete listings if needed.


Include a logout button to return to the home page.
Ensure the dashboard is protected; redirect unauthorized users to the login page.


General Requirements:

Make the site responsive for desktop and mobile devices using CSS media queries.
Use modern design with clean UI (e.g., Bootstrap or Tailwind CSS for styling).
Store listings data in a JSON array or simple database simulation.
Handle photo uploads by allowing file inputs and displaying previews.
Add basic validation for forms (e.g., required fields).
Ensure navigation with a header menu including Home, Search, and Login (which leads to dashboard after auth).